<?php

namespace App\Http\Controllers\Saf\Sellers;


use App\constants\Constants;
use App\Http\Controllers\BaseController;
use App\Http\Mpesa\Mpesa;
use App\Models\Sellers\MpesaRequests;
use App\Models\STKPushRequest;
use Illuminate\Http\Request;

/**
 * Class Mpesa
 * @package Safaricom\Mpesa
 */
class MpesaController extends BaseController
{

    /**
     * Define env method similar to laravel's
     *
     * @param String $env_param | Environment Param Name
     *
     * @return String | Actual Param
     */
    public static function env($env_param)
    {

        $dotenv = new Dotenv();

        $dotenv->load('../.env');

        $env = getenv($env_param);

        return $env;
    }

    /**
     * This is used to generate tokens for the live environment
     * @return mixed
     */
    public static function generateLiveToken()
    {

        try {
            $consumer_key = env("MPESA_CONSUMER_KEY");
            $consumer_secret = env("MPESA_CONSUMER_SECRET");
        } catch (\Throwable $th) {
            $consumer_key = self::env("MPESA_CONSUMER_KEY");
            $consumer_secret = self::env("MPESA_CONSUMER_SECRET");
        }

        if (!isset($consumer_key) || !isset($consumer_secret)) {
            die("please declare the consumer key and consumer secret as defined in the documentation");
        }
        $url = 'https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials';
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        $credentials = base64_encode($consumer_key . ':' . $consumer_secret);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Authorization: Basic ' . $credentials)); //setting a custom header
        curl_setopt($curl, CURLOPT_HEADER, false);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

        $curl_response = curl_exec($curl);

        return json_decode($curl_response)->access_token;


    }


    /**
     * use this function to generate a sandbox token
     * @return mixed
     */
    public static function generateSandBoxToken()
    {

        try {
            $consumer_key = env('MPESA_CONSUMER_KEY');
            $consumer_secret = env('MPESA_CONSUMER_SECRET');
        } catch (\Throwable $th) {
            $consumer_key = self::env("MPESA_CONSUMER_KEY");
            $consumer_secret = self::env("MPESA_CONSUMER_SECRET");
        }

        if (!isset($consumer_key) || !isset($consumer_secret)) {
            die("please declare the consumer key and consumer secret as defined in the documentation");
        }
        $url = 'https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials';
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        $credentials = base64_encode($consumer_key . ':' . $consumer_secret);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Authorization: Basic ' . $credentials)); //setting a custom header
        curl_setopt($curl, CURLOPT_HEADER, false);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

        $curl_response = curl_exec($curl);

        return json_decode($curl_response)->access_token;
    }


    /**
     * Use this function to initiate an STKPush Simulation
     * @param $BusinessShortCode | The organization shortcode used to receive the transaction.
     * @param $LipaNaMpesaPasskey | The password for encrypting the request. This is generated by base64 encoding BusinessShortcode, Passkey and Timestamp.
     * @param $TransactionType | The transaction type to be used for this request. Only CustomerPayBillOnline is supported.
     * @param $Amount | The amount to be transacted.
     * @param $PartyA | The MSISDN sending the funds.
     * @param $PartyB | The organization shortcode receiving the funds
     * @param $PhoneNumber | The MSISDN sending the funds.
     * @param $CallBackURL | The url to where responses from M-Pesa will be sent to.
     * @param $AccountReference | Used with M-Pesa PayBills.
     * @param $TransactionDesc | A description of the transaction.
     * @param $Remark | Remarks
     */
    public function STKPushSimulation(Request $request)
    {
        $businessShortCode = env('MPESA_BUSINESS_CODE');
        $lipaNaMpesaPassKey = env('LIPA_NA_MPESA_PASS_KEY');
        $transactionType = env('TRANSACTION_TYPE');
        $amount = "1";
        $partA = $request->phone;
        $partB = $businessShortCode;
        $phoneNumber = $partA;
        $callBackUrl = "https://cowardly-squid-91.localtunnel.me/e_commerce/public/seller/build/receive/stk_payments";
        //route('stk-callback');
        $accountRef = "Ooks Developers";
        $transactionDesc = "some little description";
        $remarks = "Subscribing";


        try {
            $environment = env("MPESA_ENV");
        } catch (\Throwable $th) {
            $environment = self::env("MPESA_ENV");
        }

        if ($environment == "live") {
            $url = 'https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest';
            $token = self::generateLiveToken();
        } elseif ($environment == "sandbox") {
            $url = 'https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest';
            $token = self::generateSandBoxToken();
        } else {
            return json_encode(["Message" => "invalid application status"]);
        }


        $timestamp = '20' . date("ymdhis");
        $password = base64_encode($businessShortCode . $lipaNaMpesaPassKey . $timestamp);

        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type:application/json', 'Authorization:Bearer ' . $token));


        $curl_post_data = array(
            'BusinessShortCode' => $businessShortCode,
            'Password' => $password,
            'Timestamp' => $timestamp,
            'TransactionType' => $transactionType,
            'Amount' => $amount,
            'PartyA' => $partA,
            'PartyB' => $partB,
            'PhoneNumber' => $phoneNumber,
            'CallBackURL' => $callBackUrl,
            'AccountReference' => $accountRef,
            'TransactionDesc' => $transactionDesc,
            'Remarks' => $remarks
        );

        $data_string = json_encode($curl_post_data);

        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($curl, CURLOPT_HEADER, false);
        $curl_response = curl_exec($curl);


        $mpesaResponse=json_decode($curl_response,true);
        $mpesaResponse['seller_id']=auth()->id();
        if($mpesaResponse['ResponseCode']==0) {
            $mpesaResponse['status']=Constants::STATUS_SUCCESS;
            MpesaRequests::create($mpesaResponse);
            return redirect()->route('seller.payment_status');
        }
        else{
            $mpesaResponse['status']=Constants::STATUS_FAILED;
            MpesaRequests::create($mpesaResponse);
            return redirect()->back();
        }
    }

}
